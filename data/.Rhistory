#'
)
#load packages
library(tidyverse)
library(reshape2)
library(docopt)
library(caret)
library(testthat)
theme_set(theme_bw())
"Creates eda plots for the pre-processed training data from the Wisconsin breast cancer data (from http://mlr.cs.umass.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data).
Saves the plots as a pdf and png file.
Usage: src/eda_vis.r --X_train_path=<X_train_path> --y_train_path=<y_train_path>
Options:
--X_train_path=<X_train_path>     Path (including filename) to training data (which needs to be saved as a feather file)
--y_train_path=<y_train_path> Path to directory where the plots should be saved
" -> doc
opt <- docopt(doc)
#extra function
## Function from User cybernetic at https://stackoverflow.com/questions/23891140/r-how-to-visualize-confusion-matrix-using-the-caret-package
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#1A64A7')
text(195, 435, 'ASD Diagnosis', cex=1.2)
rect(250, 430, 340, 370, col='#91C4DE')
text(295, 435, 'No ASD Diagnosis', cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#91C4DE')
rect(250, 305, 340, 365, col='#1A64A7')
text(140, 400, 'ASD Diagnosed', cex=1.2, srt=90)
text(140, 335, 'No ASD Diagnosis', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
#' Makes the three EDA plots
#'
#' @param X_train_path
#' @param y_train_path
#'
#' @export
#' img/01_corr_heatmap.png
#' img/02_confusion_matrix.png
#' img/03_prop_result.png
#'
#load packages
library(tidyverse)
library(reshape2)
library(docopt)
library(caret)
library(testthat)
theme_set(theme_bw())
"Creates eda plots for the pre-processed training data from the Wisconsin breast cancer data (from http://mlr.cs.umass.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data).
Saves the plots as a pdf and png file.
Usage: src/eda_vis.r --X_train_path=<X_train_path> --y_train_path=<y_train_path>
Options:
--X_train_path=<X_train_path>     Path (including filename) to training data (which needs to be saved as a feather file)
--y_train_path=<y_train_path> Path to directory where the plots should be saved
" -> doc
opt <- docopt(doc)
#extra function
## Function from User cybernetic at https://stackoverflow.com/questions/23891140/r-how-to-visualize-confusion-matrix-using-the-caret-package
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#1A64A7')
text(195, 435, 'ASD Diagnosis', cex=1.2)
rect(250, 430, 340, 370, col='#91C4DE')
text(295, 435, 'No ASD Diagnosis', cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#91C4DE')
rect(250, 305, 340, 365, col='#1A64A7')
text(140, 400, 'ASD Diagnosed', cex=1.2, srt=90)
text(140, 335, 'No ASD Diagnosis', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
#' Makes the three EDA plots
#'
#' @param X_train_path
#' @param y_train_path
#'
#' @export
#' img/01_corr_heatmap.png
#' img/02_confusion_matrix.png
#' img/03_prop_result.png
#'
test_that("The X_train_path and y_train_path is correct", {
expect_equivalent(X_train_path, "data/clean-data/Xtrain-clean-autism-screening.csv")
expect_equivalent(y_train_path, "data/clean-data/ytrain-clean-autism-screening.csv")
})
#read files
df_autism_X <- read_csv(X_train_path)
df_autism_y <- read_csv(y_train_path)
<- function(X_train_path, y_train_path) {
test_that("The X_train_path and y_train_path is correct", {
expect_equivalent(X_train_path, "data/clean-data/Xtrain-clean-autism-screening.csv")
expect_equivalent(y_train_path, "data/clean-data/ytrain-clean-autism-screening.csv")
})
#read files
df_autism_X <- read_csv(X_train_path)
df_autism_y <- read_csv(y_train_path)
#clean and name df
df_autism_y$X1 <- NULL
df_autism <- cbind(df_autism_X, df_autism_y)
names(df_autism) <- make.names(names(df_autism))
df_autism$gender <- as.factor(df_autism$gender)
df_autism$jaundice <- as.factor(df_autism$jaundice)
df_autism$autism <- as.factor(df_autism$autism)
df_autism$Class.ASD <- tolower(df_autism[[21]])
df_autism$Class.ASD <- as.factor(df_autism$Class.ASD)
a_score <- c('A1_Score', 'A2_Score', 'A3_Score', 'A4_Score', 'A5_Score', 'A6_Score', 'A7_Score', 'A8_Score', 'A9_Score', 'A10_Score')
#plot 1 heat map
corr_heatmap <- df_autism  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
ggsave(plot = corr_heatmap, "img/01_corr_heatmap.png", width = 8, height = 5)
#plot 2 confusion matrix
numLlvs <- 2
cm <- confusionMatrix(
df_autism$autism,
df_autism$Class.ASD)
plot <- draw_confusion_matrix(cm)
ggsave(plot = draw_confusion_matrix(cm), "img/02_confusion_matrix.png",width = 7, height = 5)
#plot 3 bar chart
df_autism  %>%
ggplot()+
geom_bar(mapping = aes(x=as.factor(result), fill = autism),
position = "fill")+
ylab("Proportion of Participants")+
xlab("ASD-10 Test Score")+
ggtitle("Proportion of Participants by ASD-10 Test Score")+
scale_fill_brewer(name = "Diagnosed \nwith Autism", palette = "Paired")
ggsave("img/03_prop_result.png", width = 7, height = 5)
}
x_train <- "../data/clean-data/Xtrain-clean-autism-screening.csv"
y_train <- "../data/clean-data/ytrain-clean-autism-screening.csv"
main(opt[["--X_train_path"]], opt[["--y_train_path"]])
corr_heatmap <- df_autism  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
library(ggplot)
library(tidyverse)
getwd()
setwd("~/Desktop/MDS_Labs/Block4/522/522-Workflows-Group-414")
read_csv("data/Xtrain-clean-autism-screening.csv")
setwd("~/Desktop/MDS_Labs/Block4/522/522-Workflows-Group-414/data")
getwd()
read_csv("Xtrain-clean-autism-screening.csv")
read_csv("clean-data/Xtrain-clean-autism-screening.csv")
df_autism <- read_csv("clean-data/Xtrain-clean-autism-screening.csv")
corr_heatmap <- df_autism  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
corr_heatmap
get_upper_tri
return(df)
get_lower_tri<-function(df){
cormat[upper.tri(df)] <- NA
return(df)
}
get_lower_tri(df_autism)
df[upper.tri(df)] <- NA
get_lower_tri<-function(df){
df[upper.tri(df)] <- NA
return(df)
}
get_lower_tri(df_autism)
corr_heatmap <- get_lower_tri(df_autism)  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
corr_heatmap
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
get_lower_tri
corr_heatmap <- get_lower_tri(df_autism)  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
corr_heatmap
melted_cormat <- melt(, na.rm = TRUE)
lower_tri <- get_lower_tri<-function(df){
df[upper.tri(df)] <- NA
return(df)
}
melted_cormat <- melt(lower_tri, na.rm = TRUE)
corr_heatmap <- get_lower_tri(df_autism)  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
corr_heatmap
lower_tri <- get_lower_tri<-function(df){
df[upper.tri(df)] <- NA
return(df)
}
df[lower.tri(df)] <- NA
lower_tri <- get_lower_tri<-function(df){
df[lower.tri(df)] <- NA
return(df)
}
library(reshape2)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
library(reshape2)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
corr_heatmap <- melted_cormat  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
melted_cormat <- melt(lower_tri, na.rm = TRUE)
df[upper(df)] <- NA
return(df)
lower_tri <- get_lower_tri<-function(df){
df[upper(df)] <- NA
return(df)
}
library(reshape2)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
corr_heatmap <- melted_cormat  %>%
select(a_score)  %>%
cor() %>%
melt() %>%
filter(value < 1) %>%
ggplot(aes(x=Var1, y=Var2, fill = value))+
geom_tile()+
ggtitle("Correlation Heatmap")+
labs(fill = "Correlation")+
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank())
library(e1701)
e1701::
library(e1071)
install.packages('e1071')
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plm))
suppressPackageStartupMessages(library(lme4))
suppressPackageStartupMessages(library(mice))
library(broom)
sleep <- read_csv("data/sleep_data.csv", col_types = cols())
options(repr.plot.height = 50, repr.plot.width = 18)
sleep2 <- sleep %>%
mutate(method = ifelse(method == "control", 0, 1))
sleep2 %>%
ggplot(aes(x = method, y = time_to_sleep, color = age)) +
geom_point(size=0.5) +
facet_wrap(~volunteer) +
geom_smooth(method = "lm", se=0, size = 0.5) +
# scale_color_discrete(name="Age") +
labs(x = "Volunteer",
y = "Time to sleep",
title = "Effects on Time to Sleep")
sleep_model1 <- lm(time_to_sleep ~ method + volunteer, data = sleep)
summary(sleep_model1)
sleep_model1$coefficients['methodglasses'] + qnorm(0.025)*1.713
sleep_model1$coefficients['methodglasses'] + qnorm(0.975)*1.713
tidy(sleep_model1)$std.error[2]
model_slope <- lmer(time_to_sleep ~  method + (method|volunteer),
data = sleep)
# coef(model_slope)
#
# summary(sleep_model1)
summary(model_slope)
tidy(model_slope)
estimate <- tidy(model_slope)$estimate[2]
stderror <- tidy(model_slope)$std.error[2]
estimate <- tidy(model_slope)$estimate[2]
stderror <- tidy(model_slope)$std.error[2]
model_slope2 <- lmer(time_to_sleep ~ method*age + (method|volunteer), data = sleep)
summary(model_slope2)
prediction_21 <- coef(model_slope)$volunteer['A',]$`(Intercept)`+coef(model_slope)$volunteer['A',]$methodglasses
(fixef(model_slope)*c(1,1))[[1]]
predict(model_slope,
newdata = tibble(volunteer = as.factor("W"),
method="control"),
allow.new.levels = TRUE)
tidied_model_slope <- tidy(model_slope)
tidied_model_slope$estimate[3]
sum(fixef(model_slope)*c(1,1))
predict(model_slope,
newdata = tibble(volunteer = as.factor("W"),
method="glasses"),
allow.new.levels = TRUE)
#TODO
titanic <- read_csv("data/titanic-train.csv", col_types = cols())
titanic %>%
filter(is.na(Age))
md.pattern(titanic, rotate.names = 0.45)
titanic_impute_mean <- titanic
titanic_impute_mean$Age[is.na(titanic_impute_mean$Age)] <- mean(titanic_impute_mean$Age, na.rm=TRUE)
logit_model_imputed <- glm(Survived ~ Age, data = titanic_impute_mean)
confint(logit_model_imputed)
summary(logit_model_imputed)
intercept <- tidy(logit_model_imputed)$estimate[2]
stderror <- tidy(logit_model_imputed)$std.error[2]
intercept
stderror
titanic_impute_mean <- titanic
titanic_impute_mean$Age[is.na(titanic_impute_mean$Age)] <- mean(titanic_impute_mean$Age, na.rm=TRUE)
logit_model_imputed <- glm(Survived ~ Age + Sex + Fare, data = titanic_impute_mean)
confint(logit_model_imputed)
summary(logit_model_imputed)
intercept <- tidy(logit_model_imputed)$estimate[2]
stderror <- tidy(logit_model_imputed)$std.error[2]
intercept
stderror
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
imputed_data$data$Age
models <- with(data = imputed_data, glm(Survived ~ Age + Sex + Fare))
pooled_model <- pool(models)
summary(pooled_model)
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
# imputed_data$data$Age
models <- with(data = imputed_data, glm(Survived ~ Age + Sex + Fare))
pooled_model <- pool(models)
summary(pooled_model)
sonfint(pooled_model)
confint(pooled_model)
pooled_model$pooled
pooled_model
pooled_model$pooled
confint(pooled_model$pooled)
pooled_model$pooled
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
# imputed_data$data$Age
models <- with(data = imputed_data, glm(Survived ~ Age + Sex + Fare))
pooled_model <- pool(models)
summary(pooled_model)
pooled_model$pooled
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
# imputed_data$data$Age
models <- with(data = imputed_data, glm(Survived ~ Age + Sex + Fare))
pooled_model <- pool(models)
summary(pooled_model)
pooled_model$pooled
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
# imputed_data$data$Age
models <- with(data = imputed_data, glm(Survived ~ Age + Sex + Fare))
pooled_model <- pool(models)
summary(pooled_model)
pooled_model$pooled
titanic_filtered <- titanic %>%
select(Age, Sex, Fare)
titanic_complete <- titanic_filtered[complete.cases(titanic_filtered),]
logit_model <- glm(Survived ~ Age + Sex + Fare, data = titanic_complete)
titanic_filtered <- titanic %>%
select(Survived, Age, Sex, Fare)
titanic_complete <- titanic_filtered[complete.cases(titanic_filtered),]
logit_model <- glm(Survived ~ Age + Sex + Fare, data = titanic_complete)
confint(logit_model)
summary(logit_model)
confint(logit_model)
View(titanic_complete)
logit_model <- glm(Survived ~ Age + Sex + Fare, data = titanic_complete, family = "binomial")
confint(logit_model)
summary(logit_model)
logit_model_imputed <- glm(Survived ~ Age + Sex + Fare,
data = titanic_impute_mean,
family = "binomial")
confint(logit_model_imputed)
summary(logit_model_imputed)
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
models <- with(data = imputed_data, glm(Survived ~ Age + Sex + Fare))
models <- with(data = imputed_data,
glm(Survived ~ Age + Sex + Fare,
family = "binomial"))
pooled_model <- pool(models)
summary(pooled_model)
pooled_model$pooled
pooled_model$pooled$estimate
pooled_model$pooled
pooled_model$pooled$estimate[2]
summary(pooled_model)$std.error
summary(pooled_model)$std.error[2]
set.seed(514)
imputed_data <- mice(titanic, m = 20, printFlag = FALSE)
# imputed_data$data$Age
models <- with(data = imputed_data,
glm(Survived ~ Age + Sex + Fare,
family = "binomial"))
pooled_model <- pool(models)
summary(pooled_model)
estimate <- pooled_model$pooled$estimate[2]
stderror <- summary(pooled_model)$std.error[2]
estimate + qnorm(0.025)*stderror
estimate + qnorm(0.975)*stderror
pooled_model$pooled
summary(pooled_model)
estimate <- summary(pooled_model)$estimate[2]
stderror <- summary(pooled_model)$std.error[2]
estimate
estimate + qnorm(0.025)*stderror
estimate + qnorm(0.975)*stderror
exp(-0.01)
sessionInfo()
